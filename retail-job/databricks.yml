bundle:
  name: retail-data-pipeline

workspace:
  root_path: "~/.bundle/${bundle.name}/${bundle.target}"

targets:
  dev:
    mode: development
    default: true
    workspace:
      root_path: "~/.bundle/${bundle.name}/${bundle.target}"
  
  prd:
    mode: production
    workspace:
      root_path: "/Workspace/Users/${workspace.current_user.userName}/.bundle/prod/${bundle.name}"

resources:
  jobs:
    retail_data_processing_job:
      name: "Retail Data Processing Pipeline"
      description: "End-to-end retail data processing pipeline"
      
      job_clusters:
        - job_cluster_key: "main_cluster"
          new_cluster:
            spark_version: "13.3.x-scala2.12"
            node_type_id: "i3.xlarge"
            num_workers: 2
            
      tasks:
        - task_key: "ingest_orders_task"
          description: "Create orders bronze table from source data"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/01_data_ingestion/orders_table_creation.py"
            source: WORKSPACE
            
        - task_key: "ingest_sales_task"
          description: "Create sales bronze table from source data"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/01_data_ingestion/sales_table_creation.py"
            source: WORKSPACE
            
        - task_key: "load_customers_task"
          description: "Load and create customers bronze table"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/02_data_loading/customers_table_creation.py"
            source: WORKSPACE
          depends_on:
            - task_key: "ingest_orders_task"
            - task_key: "ingest_sales_task"
            
        - task_key: "join_customers_sales_task"
          description: "Join customers and sales data"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/03_data_processing/join_customers_sales.py"
            source: WORKSPACE
          depends_on:
            - task_key: "load_customers_task"
            
        - task_key: "join_customers_orders_task"
          description: "Join customers and orders data"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/03_data_processing/join_customers_orders.py"
            source: WORKSPACE
          depends_on:
            - task_key: "load_customers_task"
            
        - task_key: "remove_duplicates_task"
          description: "Remove duplicate records from processed data"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/03_data_processing/remove_duplicates.py"
            source: WORKSPACE
          depends_on:
            - task_key: "join_customers_sales_task"
          condition_task:
            op: "EQUAL_TO"
            left: "{{tasks.join_customers_sales_task.values.has_duplicates}}"
            right: "true"
            
        - task_key: "transform_data_task"
          description: "Clean and transform data to gold layer"
          job_cluster_key: "main_cluster"
          notebook_task:
            notebook_path: "./Task Files/04_data_transformation/clean_and_transform.py"
            source: WORKSPACE
          depends_on:
            - task_key: "remove_duplicates_task"
              outcome: "true"
            
        - task_key: "process_state_data_task"
          description: "Process orders data by state"
          job_cluster_key: "main_cluster"
          for_each_task:
            inputs: '["CA", "NY", "TX", "FL"]'
            task:
              task_key: "process_single_state"
              notebook_task:
                notebook_path: "./Task Files/05_state_processing/process_orders_by_state.py"
                source: WORKSPACE
                base_parameters:
                  state: "{{item}}"
          depends_on:
            - task_key: "join_customers_orders_task"

      timeout_seconds: 3600
      max_concurrent_runs: 1
      
      email_notifications:
        on_failure:
          - "admin@company.com"
        on_success:
          - "admin@company.com"