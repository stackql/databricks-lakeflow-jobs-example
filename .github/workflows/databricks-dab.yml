# .github/workflows/databricks-dab.yml
name: Databricks Asset Bundle CI/CD

on:
  pull_request:
    branches:
      - main
    paths:
      - 'stackql-deploy/**'
      - 'retail-job/**'
      - '.github/workflows/databricks-dab.yml'
  
  push:
    branches:
      - main
    paths:
      - 'stackql-deploy/**'
      - 'retail-job/**'
      - '.github/workflows/databricks-dab.yml'

env:
  # AWS Credentials
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  
  # Databricks Account Credentials
  DATABRICKS_ACCOUNT_ID: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
  DATABRICKS_AWS_ACCOUNT_ID: ${{ secrets.DATABRICKS_AWS_ACCOUNT_ID }}
  DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
  DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
  
  # # Databricks Workspace Credentials (set after infrastructure provisioning)
  # DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  # DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

jobs:

  provision-infrastructure:
    name: Provision Databricks Infrastructure
    runs-on: ubuntu-latest
    outputs:
      workspace_id: ${{ steps.extract-outputs.outputs.workspace_id }}
      workspace_url: ${{ steps.extract-outputs.outputs.workspace_url }}
      deployment_name: ${{ steps.extract-outputs.outputs.deployment_name }}
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "stack_env=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "stack_env=prod" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy Infrastructure with StackQL
        uses: stackql/setup-deploy@v1.0.2
        with:
          command: 'build'
          stack_dir: 'infrastructure'
          stack_env: ${{ steps.set-env.outputs.stack_env }}
          env_vars: |
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }}
            DATABRICKS_ACCOUNT_ID=${{ env.DATABRICKS_ACCOUNT_ID }}
            DATABRICKS_AWS_ACCOUNT_ID=${{ env.DATABRICKS_AWS_ACCOUNT_ID }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
      
      - name: Extract StackQL outputs
        id: extract-outputs
        run: |
          # Extract workspace details from StackQL exports
          WORKSPACE_ID=$(cat .stackql/exports.json | jq -r '.databricks_workspace_id // empty')
          WORKSPACE_URL=$(cat .stackql/exports.json | jq -r '.databricks_deployment_name // empty')
          DEPLOYMENT_NAME=$(cat .stackql/exports.json | jq -r '.databricks_deployment_name // empty')
          
          echo "workspace_id=${WORKSPACE_ID}" >> $GITHUB_OUTPUT
          echo "workspace_url=https://${WORKSPACE_URL}.cloud.databricks.com" >> $GITHUB_OUTPUT
          echo "deployment_name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT
          
          echo "📦 Workspace provisioned:"
          echo "  ID: ${WORKSPACE_ID}"
          echo "  URL: https://${WORKSPACE_URL}.cloud.databricks.com"
      
      - name: Upload StackQL exports
        uses: actions/upload-artifact@v4
        with:
          name: stackql-exports-${{ steps.set-env.outputs.environment }}
          path: .stackql/exports.json
          retention-days: 7
      
      - name: Comment infrastructure status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const workspaceUrl = '${{ steps.extract-outputs.outputs.workspace_url }}';
            const workspaceId = '${{ steps.extract-outputs.outputs.workspace_id }}';
            const env = '${{ steps.set-env.outputs.environment }}';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🏗️ Infrastructure Provisioned\n\n**Environment:** ${env}\n**Workspace ID:** ${workspaceId}\n**Workspace URL:** ${workspaceUrl}\n\n✅ Infrastructure is ready for workflow deployment!`
            });
      
      - name: Create infrastructure summary
        run: |
          echo "## 🏗️ Infrastructure Provisioning Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.set-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace ID:** ${{ steps.extract-outputs.outputs.workspace_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workspace URL:** ${{ steps.extract-outputs.outputs.workspace_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Resources Created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ IAM Cross-account role" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ S3 workspace bucket" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ S3 metastore bucket" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unity Catalog storage credential" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ External location" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Databricks workspace" >> $GITHUB_STEP_SUMMARY

  # validate:
  #   name: Validate DAB Configuration
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Setup Databricks CLI
  #       uses: databricks/setup-cli@main
      
  #     - name: Validate bundle
  #       run: |
  #         databricks bundle validate -t dev
  #         echo "✅ Bundle validation passed!"
      
  #     - name: Post validation results to PR
  #       if: always()
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const outcome = '${{ job.status }}';
  #           const emoji = outcome === 'success' ? '✅' : '❌';
  #           const message = outcome === 'success' 
  #             ? 'DAB validation passed successfully!' 
  #             : 'DAB validation failed. Please check the logs.';
            
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: `${emoji} **Databricks Asset Bundle Validation**\n\n${message}`
  #           });

  # deploy-dev:
  #   name: Deploy to Development
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   needs: validate
  #   environment: dev
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Setup Databricks CLI
  #       uses: databricks/setup-cli@main
      
  #     - name: Deploy to dev
  #       run: |
  #         databricks bundle deploy -t dev
  #         echo "✅ Deployed to dev environment!"
      
  #     - name: Comment deployment status
  #       if: always()
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const outcome = '${{ job.status }}';
  #           const emoji = outcome === 'success' ? '🚀' : '❌';
  #           const message = outcome === 'success' 
  #             ? 'Successfully deployed to **dev** environment!' 
  #             : 'Deployment to dev failed. Please check the logs.';
            
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: `${emoji} **Development Deployment**\n\n${message}`
  #           });

  # deploy-prod:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: 
  #     name: production
  #     url: https://your-workspace.cloud.databricks.com
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Setup Databricks CLI
  #       uses: databricks/setup-cli@main
      
  #     - name: Validate production bundle
  #       run: |
  #         databricks bundle validate -t prod
  #         echo "✅ Production bundle validation passed!"
      
  #     - name: Deploy to production
  #       run: |
  #         databricks bundle deploy -t prod
  #         echo "✅ Deployed to production environment!"
      
  #     - name: Create deployment summary
  #       run: |
  #         echo "## 🎉 Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
  #         echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
  #         echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
  #         echo "**Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
      
  #     - name: Notify on failure
  #       if: failure()
  #       run: |
  #         echo "## ❌ Production Deployment Failed" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "Please check the logs and retry the deployment." >> $GITHUB_STEP_SUMMARY

  # notify-slack:
  #     name: Notify Slack
  #     runs-on: ubuntu-latest
  #     if: always()
  #     needs: [deploy-prod]
      
  #     steps:
  #       - name: Send Slack notification
  #         uses: slackapi/slack-github-action@v1
  #         with:
  #           payload: |
  #             {
  #               "text": "${{ needs.deploy-prod.result == 'success' && '✅' || '❌' }} Production Deployment ${{ needs.deploy-prod.result }}",
  #               "blocks": [
  #                 {
  #                   "type": "section",
  #                   "text": {
  #                     "type": "mrkdwn",
  #                     "text": "*Databricks DAB Deployment*\n\n*Status:* ${{ needs.deploy-prod.result }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Author:* ${{ github.actor }}"
  #                   }
  #                 }
  #               ]
  #             }
  #         env:
  #           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}          